#!/bin/sh
# postrm script for vault

set -e

# summary of how this script can be called:
#        * <postrm> `remove'
#        * <postrm> `purge'
#        * <old-postrm> `upgrade' <new-version>
#        * <new-postrm> `failed-upgrade' <old-version>
#        * <new-postrm> `abort-install'
#        * <new-postrm> `abort-install' <old-version>
#        * <new-postrm> `abort-upgrade' <old-version>
#        * <disappearer's-postrm> `disappear' <overwriter>
#          <overwriter-version>
# for details, see https://www.debian.org/doc/debian-policy/ or
# the debian-policy package

unset_perms() {
    dpkg-statoverride --remove "$1" 1>/dev/null 2>&1 || true
}

case "$1" in
    remove)
        unset_perms /var/lib/vault

        deluser --quiet vault 1>/dev/null 2>&1 || true
    ;;

    purge)
        rm -rf /etc/vault.d /var/lib/vault
    ;;

    upgrade|failed-upgrade|abort-install|abort-upgrade|disappear)
    ;;

    *)
        echo "postrm called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

if [ -d /run/systemd/system ] ; then
    systemctl --system daemon-reload >/dev/null || true
fi

if [ "$1" = "remove" ]; then
    if [ -x /usr/bin/deb-systemd-helper ]; then
        deb-systemd-helper mask vault.service >/dev/null
    fi
elif [ "$1" = "purge" ]; then
    update-rc.d vault remove >/dev/null

    if [ -x /usr/bin/deb-systemd-helper ]; then
        deb-systemd-helper purge vault.service >/dev/null
        deb-systemd-helper unmask vault.service >/dev/null
    fi
fi

exit 0
